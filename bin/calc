#!/usr/bin/env perl
use warnings;
use strict;
use open IO => qw(:locale);
use Text::Wrap qw(wrap);
use Term::ReadLine;

our $last_result;
our %gotten;
our @gotten;
our $format;

sub _ ();

get("POSIX", qw(acos asin atan ceil cosh floor fmod frexp
                ldexp log10 modf pow sinh tan tanh
                acosh asinh atanh cbrt copysign expm1 fdim fma
                fmax fmin hypot ilogb Inf j0 j1 jn y0 y1 yn
                lgamma log1p log2 logb NaN nan nextafter
                nexttoward remainder remquo round scalbn
                tgamma trunc));
get("List::Util", qw(min max minn));
get("Math::Trig", qw(:pi));

# mode 1:
#     interactive calc> prompt
# mode 2:
#     each argument is a filename, or read from stdin
#     mode 2.1:
#         each line is an expression
#     mode 2.2:
#         each line may contain {...} placeholders
# mode 3:
#     each argument is an expression
#
# if not interactive mode, how are we supposed to guess?
# do we require the user to specify mode 2.1, 2.2, or 3?
#
# calc -e   each argument is an expression
# calc -f   each argument is a filename; each line an expression
# calc -F   each argument is a filename; each line contains placeholders

if (-t 0 && -t 1 && !scalar @ARGV) {
    my $term = Term::ReadLine->new('calc');
    my $prompt = 'calc> ';
    my $OUT = $term->OUT || \*STDOUT;
    my $expr;
    while (defined($expr = $term->readline($prompt))) {
        $expr =~ s{\R\z}{};
        $expr =~ s{^\s*}{};
        $expr =~ s{\s*$}{};
        if ($expr eq 'help') {
            help();
            next;
        }
        my $calc_result = eval $expr;
        if ($@) {
            warn($@);
            next;
        }
        if (defined $format) {
            printf("${format}\n", $calc_result);
        } else {
            printf("%s\n", $calc_result);
        }
        $last_result = $calc_result;
    }
} else {
    # syntaxes:
    #     {<expr>}                  => {<result>}
    #     {<expr>=<text>}           => {<expr>=<result>}
    # maybe:
    #     {$<ident>:=<expr>}        => {$<ident>:=<result>}
    #     {$<ident>:=<expr>=<text>} => {$<ident>:=<expr>=<result>}
    # possibly:
    #     {<expr>#<format>}         => {<result>}
    #     {<expr>=<text>#<format>}  => {<expr>=<result>#<format>}
    while (<>) {
        s{(?<open>\{)
          (?<space1>\s*)
          (?<expr>\S.*?)
          (?<space2>\s*)
          (?:
              (?<eq>=)
              (?<space3>\s*)
              (?:
                  (?<eq_text>\S.*?)
                  (?<space4>\s*)
              )?
          )?
          (?<close>\})}
         {evil($&, %+)}gex;
        print;
    }
}

sub evil {
    my ($str, %groups) = @_;
    my ($open, $space1, $expr, $space2, $eq, $space3, $eq_text, $space4, $close) =
      @groups{qw(open space1 expr space2 eq space3 eq_text space4 close)};
    print("\$expr = $expr\n");
    my $calc_result = eval $expr;
    if ($@) {
        print("eval $expr returned an error: $@\n");
        print("returning back \$str = $str\n");
        return $str;
    }
    print("eval $expr returned \$calc_result = $calc_result\n");
    $last_result = $calc_result;
    if (defined $groups{eq}) {
        return $open . $space1 . $expr . $space2 . $eq . $space3 . $calc_result . ($space4 // $space3) . $close;
    }
    return $open . $space1 . $calc_result . $space2 . $close;
}

sub _ () {
    my $result = $last_result // 0;
    print("_ returning $last_result\n");
    return ($last_result // 0);
}

sub help {
    foreach my $module (sort keys %gotten) {
        my $line_1 = sprintf("%-16s => ", $module);
        my $line_2 = " " x length($line_1);
        print(wrap($line_1, $line_2, join(' ', sort @{$gotten{$module}})), "\n");
    }
}

sub get {
    my ($module, @symbols) = @_;
    eval "use $module;";
    return if $@;
    my %before = do { no strict 'refs'; map { ($_ => 1) } keys %{__PACKAGE__ . '::'}; };
    foreach my $symbol (@symbols) {
        eval { import $module $symbol; };
    }
    my %after = do { no strict 'refs'; map { ($_ => 1) } keys %{__PACKAGE__ . '::'}; };
    my @symbol = grep { !exists $before{$_} } keys %after;
    foreach my $symbol (@symbol) {
        push(@{$gotten{$module}}, $symbol);
        push(@gotten, $symbol);
    }
}
