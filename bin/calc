#!/usr/bin/env perl
use warnings;
use strict;
use File::Basename qw(dirname);

use lib dirname(__FILE__) . "/../lib";
use My::Calc::Functions qw(:all);
use My::Calc qw(calc_evaluate);

our $format;

use Getopt::Long;
Getopt::Long::GetOptions(
    "f|format=s" => \$format,
) or die(":-(\n");

use Term::ReadLine;
use Text::Wrap;

if (!scalar @ARGV && -t 0 && -t 1) {
    my $green = `tput setaf 2`;
    my $reset = `tput sgr0`;
    my $has_term_readline_gnu  = eval { require Term::ReadLine::Gnu };
    my $has_term_readline_perl = eval { require Term::ReadLine::Perl };
    my $has_term_readline_zoid = eval { require Term::ReadLine::Zoid };
    my $term_readline_class =
      $has_term_readline_gnu ? "Term::ReadLine::Gnu" :
      $has_term_readline_zoid ? "Term::ReadLine::Zoid" :
      $has_term_readline_perl ? "Term::ReadLine::Perl" :
      "Term::ReadLine";
    warn("Loading $term_readline_class\n");
    my $term = $term_readline_class->new('calc');
    my $prompt = "${green}calc>${reset} ";
    while (defined($_ = $term->readline($prompt))) {
        evaluate_print();
    }
} else {
    while (<>) {
        evaluate_print();
    }
}

sub evaluate_print {
    if (/^\s*(help|\?)\s*$/i) {
        my @functions = My::Calc::Functions::calc_functions();
        @functions = sort @functions;
        print(wrap('', '', join(', ', @functions)), "\n");
        return;
    }
    my $result = calc_evaluate($_, $format);
    if ($@) {
        warn($@);
        return;
    }
    if (defined $result) {
        print("$result\n");
    }
}
